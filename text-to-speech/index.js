const Creatomate = require('creatomate');
const { textToSpeech } = require('./textToSpeech');

// Get the Creatomate API key as passed to this script, as follows: node index.js YOUR_API_KEY
const apiKey = process.argv[2];
if (!apiKey) {
  // Your API key can be found under project settings: https://creatomate.com/docs/api/rest-api/authentication
  console.error('\n\n⚠️  To run this example, please specify your API key as follows: node index.js YOUR_API_KEY');
  process.exit(1);
}

// Create an instance of the Creatomate SDK
const client = new Creatomate.Client(apiKey);

async function run() {

  // Define four slides with corresponding background videos
  const fragments = [
    {
      text: 'Here\'s a video that was completely generated by code.',
      videoUrl: 'https://creatomate-static.s3.amazonaws.com/demo/video1.mp4',
    },
    {
      text: 'This demo shows how dynamic text can be mixed with video, resulting in data-driven video ' +
        'of any resolution or format that can be generated automatically.',
      videoUrl: 'https://creatomate-static.s3.amazonaws.com/demo/video2.mp4',
    },
    {
      text: 'An example of a typical use case would be auto-generated explainer videos that are tailored to ' +
        'a particular audience or language.',
      videoUrl: 'https://creatomate-static.s3.amazonaws.com/demo/video3.mp4',
    },
    {
      text: 'As can be seen from the source, there is a great deal of flexibility in what is possible. ' +
        'For instance, it\'s easy to replace AWS Polly with any other TTS service. And how about combining this with AI?',
      videoUrl: 'https://creatomate-static.s3.amazonaws.com/demo/video4.mp4',
    },
    {
      text: 'Hopefully you\'ve been inspired by this example of what automated video can do. Thanks for watching!',
      videoUrl: 'https://creatomate-static.s3.amazonaws.com/demo/video5.mp4',
    },
  ];

  console.log('Converting text to speech using AWS Polly...');

  // Synthesize each sentence using AWS Polly
  const spokenTexts = await Promise.all(fragments.map(async (fragment) => {
    return {
      ...fragment,
      ...await textToSpeech(fragment.text),
    };
  }));

  console.log('Creating video with Creatomate...');

  // Create a video using Creatomate
  const source = new Creatomate.Source({

    // Generate a MP4
    outputFormat: 'mp4',

    // Generate a 9:16 video, perfect for Instagram, TikTok or YouTube Shorts
    width: 720,
    height: 1280,

    elements: [

      // For each slide, generate a composition that groups together a background video,
      // audio clip, and animated captions
      ...spokenTexts.map(({ text, videoUrl, uploadLocation, speechMarks }) => (

        new Creatomate.Composition({

          // By putting all compositions on the same track, they're played one after the other
          track: 1,

          elements: [

            // Audio clip that we created using AWS Polly
            new Creatomate.Audio({
              source: uploadLocation,
            }),

            // Background video
            new Creatomate.Video({
              source: videoUrl,
              // By default, video elements are as long as their content.
              // But in this case, we want it to be as long as the composition it is in.
              // We can do this by setting the duration to null.
              duration: null,
              // Loop the video if it's shorter than the composition
              loop: true,
            }),

            // Create a text element that is aligned at the bottom of the video
            new Creatomate.Text({

              // Use the full viewport for displaying the captions
              width: '100%',
              height: '100%',

              // Add some padding between the borders of the video and the text
              xPadding: '5 vw',
              yPadding: '11.5 vh',

              // Set the font to auto-size to the space available, but don't make the
              // text larger than 9.1 vmin, in other words 9.1% of Math.min(width, height)
              // More information at: https://creatomate.com/docs/template-editor/unit-system
              fontFamily: 'Open Sans',
              fontWeight: 700,
              fontSizeMaximum: '9.1 vmin',

              // Text background color
              backgroundColor: '#ffffff',
              backgroundAlignThreshold: '5%',

              // Align text content at the bottom of the text container
              yAlignment: '100%',

              // Generate keyframes on the text property to make the words appear word-by-word
              // This is based on speech marks timestamps received by AWS Polly
              text: speechMarks.map((mark) => {

                // Part of the sentence that has been spoken
                const spoken = text.substring(0, mark.start);

                // The word being spoken right now
                const word = text.substring(mark.start, mark.end);

                // Create a styled text using color tags
                const highlightedText = `[color rgba(0,0,0,0.4)]${spoken}[/color]`
                  + `[color #000]${word}[/color]`;

                return new Creatomate.Keyframe(highlightedText, mark.time / 1000);
              }),
            }),

          ],
        })
      )),

      // Background music
      new Creatomate.Audio({
        source: 'https://creatomate-static.s3.amazonaws.com/demo/music3.mp3',
        // Make the audio as long as the rest
        duration: null,
        // Two seconds from the end, fade out the audio
        audioFadeOut: 2,
      }),

      // Progress bar
      new Creatomate.Rectangle({
        // Place the progress bar at the top of the video
        x: '50%',
        y: '1.5%',
        width: '100%',
        height: '3%',
        // Color of the progress bar
        fillColor: 'rgba(0,0,0,0.75)',
        // Apply a 'Wipe' animation to make it animate from left to right
        animations: [
          new Creatomate.Wipe({
            xAnchor: '0%',
            fade: false,
            easing: 'linear',
          }),
        ],
      }),
    ],
  });

  // Render the video
  const renders = await client.render({ source });

  console.log('Completed:', renders);
}

run()
  .catch(error => console.error(error));
